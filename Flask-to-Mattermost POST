from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
import requests
import json

app = Flask(__name__)

app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///posts.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

class Post(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    question_id = db.Column(db.String(255), unique=True, nullable=False)
    mattermost_post_id = db.Column(db.String(255), nullable=True)

    def __init__(self, question_id):
        self.question_id = question_id

@app.route('/')
def hello():
    return "Hello, Flask!"

def post_to_mattermost(data, reply_to_post_id=None):
    question_id = data.get('questions', [{}])[0].get('question_id', None) if 'questions' in data else None

    if not question_id:
        link = data.get('answers', [{}])[0].get('link', "")
        question_id = link.split('/questions/')[1].split('/')[0] if '/questions/' in link else None

    if not question_id:
        return

    URL = "http://localhost:8065/api/v4/posts"
    CHANNEL_IDS = ["99kf7sb383gnuyr17oxuye188a", "x4uywoo6abroxdisimknjk9t8o", "fsksq8ubnirjpnbqk965tmm7sy"]
    TOKEN = "wqckix7wwjr3xmusaxamkwfktc"

    HEADERS = {
        "Authorization": f"Bearer {TOKEN}",
        "Content-Type": "application/json"
    }

    for channel_id in CHANNEL_IDS:
        post_data = {
            "channel_id": channel_id,
            "message": json.dumps(data, indent=2)
        }

        if reply_to_post_id:
            post_data["root_id"] = reply_to_post_id

        response = requests.post(URL, headers=HEADERS, data=json.dumps(post_data))

        if response.status_code in (200, 201):
            print("Post created successfully!")
            post_info = response.json()
            post_db_entry = Post.query.filter_by(question_id=str(question_id)).first()
            if post_db_entry and not post_db_entry.mattermost_post_id:
                post_db_entry.mattermost_post_id = post_info['id']
                db.session.commit()
        else:
            print(f"Failed to create post. Status Code: {response.status_code}, Message: {response.text}")

    return question_id

@app.route('/your_route', methods=['POST'])
def your_function():
    data = request.json
    if not data:
        return jsonify({"message": "No data received."})

    question_id = post_to_mattermost(data)
    return jsonify({"message": f"Received POST request and forwarded to Mattermost. Question ID: {question_id}"})

@app.route('/reply', methods=['POST'])
def reply_to_post():
    data = request.json
    link = data.get('answers', [{}])[0].get('link', "")
    question_id = link.split('/questions/')[1].split('/')[0] if '/questions/' in link else None

    if not question_id:
        return jsonify({"message": "Invalid data."})

    post_db_entry = Post.query.filter_by(question_id=str(question_id)).first()

    if not post_db_entry or not post_db_entry.mattermost_post_id:
        return jsonify({"message": "Original post not found."})

    post_to_mattermost(data, reply_to_post_id=post_db_entry.mattermost_post_id)
    return jsonify({"message": f"Reply sent to Mattermost for Question ID: {question_id}"})

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(host='0.0.0.0')
